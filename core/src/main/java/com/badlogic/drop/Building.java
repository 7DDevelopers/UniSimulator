package com.badlogic.drop;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;

/**
 * Represents a building entity within the game world, providing properties such as education level, fun level,
 * price, and income, based on the building type.
 * This class extends the Entity class and includes rendering capabilities for various building types.
 */
public class Building extends Entity {

    /**
     * The level of education provided by the building. Higher levels contribute more to the education score.
     */
    public int educationLevel;

    /**
     * The level of fun provided by the building. Higher levels contribute more to the fun score.
     */
    public int funLevel;

    /**
     * The cost to construct the building.
     */
    public int price;

    /**
     * The income generated by the building per unit time.
     */
    public int income;

    /**
     * The type of building, e.g., "LECTUREHALL", "ACCOMMODATION", "RESTAURANT", "PUB", "GYM", "PATH".
     */
    public String buildingType;

    /**
     * Constructs a Building object with specified coordinates, texture location, and building type.
     * Initializes the building's attributes based on its type.
     *
     * @param x               The x-coordinate of the building's position.
     * @param y               The y-coordinate of the building's position.
     * @param textureLocation The file path of the texture image for the building.
     * @param typeOfBuilding  The type of building, which determines its attributes such as educationLevel, funLevel, price, and income.
     */
    public Building(float x, float y, String textureLocation, String typeOfBuilding) {
        super(x, y, textureLocation);  // Call the parent constructor to initialize the entity
        buildingType = typeOfBuilding;

        // Set attributes based on the type of building
        if (typeOfBuilding.equals("LECTUREHALL")) {
            educationLevel = 100;
            funLevel = 10;
            price = 50;
            income = 0;
        } else if (typeOfBuilding.equals("ACCOMMODATION")) {
            educationLevel = 40;
            funLevel = 70;
            price = 50;
            income = 100;
        } else if (typeOfBuilding.equals("RESTAURANT")) {
            educationLevel = 0;
            funLevel = 75;
            price = 30;
            income = 75;
        } else if (typeOfBuilding.equals("PUB")) {
            educationLevel = 0;
            funLevel = 100;
            price = 40;
            income = 80;
        } else if (typeOfBuilding.equals("GYM")) {
            educationLevel = 20;
            funLevel = 80;
            price = 80;
            income = 70;
        } else if (typeOfBuilding.equals("PATH")) {
            educationLevel = 0;
            funLevel = 0;
            price = 1;
            income = 0;
        }
    }

    /**
     * Renders the building on the screen using a SpriteBatch.
     * Paths are drawn smaller (40x40) than other buildings (120x120).
     *
     * @param spriteBatch The SpriteBatch used to render the building's texture at its position.
     */
    @Override
    public void render(SpriteBatch spriteBatch) {
        spriteBatch.begin();

        // Render with appropriate size based on the building type
        if (buildingType.equals("PATH")) {
            spriteBatch.draw(super.texture, super.getPosition().x, super.getPosition().y, 40, 40);  // Draw with width and height
        } else {
            spriteBatch.draw(super.texture, super.getPosition().x, super.getPosition().y, 120, 120);  // Draw with width and height
        }

        spriteBatch.end();
    }
}
