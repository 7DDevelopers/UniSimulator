Index: core/src/main/java/com/badlogic/drop/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.badlogic.drop;\r\nimport com.badlogic.gdx.ApplicationListener;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.ScreenAdapter;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.badlogic.gdx.utils.ScreenUtils;\r\nimport com.badlogic.gdx.utils.Timer;\r\nimport com.badlogic.gdx.utils.viewport.ScreenViewport;\r\nimport org.w3c.dom.Text;\r\n\r\nimport java.awt.*;\r\nimport java.awt.image.renderable.RenderContext;\r\nimport java.sql.Time;\r\n\r\n/** {@link com.badlogic.gdx.ApplicationListener} implementation shared by all platforms. */\r\npublic class Main implements ApplicationListener {\r\n    ShapeRenderer shape;\r\n\r\n    Vector2 pos = new Vector2(100, 100);\r\n    int yChange = 300;\r\n    int xChange = 300;\r\n\r\n    float timerValue = 0;\r\n\r\n    @Override\r\n    public void create() {\r\n        shape = new ShapeRenderer();\r\n\r\n        // Prepare your application here.\r\n    }\r\n\r\n    @Override\r\n    public void resize(int width, int height) {\r\n        // Resize your application here. The parameters represent the new window size.\r\n    }\r\n\r\n    @Override\r\n    public void render() {\r\n        Gdx.gl.glClearColor(0,0,0,1);\r\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\r\n        shape.begin(ShapeRenderer.ShapeType.Filled);\r\n        shape.rect(pos.x, pos.y, 50, 50);\r\n        shape.setColor(Color.BLUE);\r\n        shape.end();\r\n\r\n        pos.x += xChange * Gdx.graphics.getDeltaTime();\r\n        pos.y += yChange * Gdx.graphics.getDeltaTime();\r\n\r\n        if(pos.x >=  1920 || pos.x < 0){\r\n            xChange = -xChange;\r\n        }\r\n        if(pos.y >=  1080 || pos.y < 0) {\r\n            yChange = -yChange;\r\n        }\r\n\r\n        timerValue += Gdx.graphics.getDeltaTime();\r\n\r\n        SpriteBatch spriteBatch = new SpriteBatch();\r\n        spriteBatch.begin();\r\n        BitmapFont font = new BitmapFont();\r\n        font.draw(spriteBatch, String.valueOf(Gdx.graphics.getFramesPerSecond()), 10, 10);\r\n        spriteBatch.end();\r\n\r\n        Gdx.app.log(\"debug\", String.valueOf(pos.x) + \"  \" + String.valueOf(pos.y));\r\n    }//\r\n\r\n    @Override\r\n    public void pause() {\r\n        // Invoked when your application is paused.\r\n    }\r\n\r\n    @Override\r\n    public void resume() {\r\n        // Invoked when your application is resumed after pause.\r\n    }\r\n\r\n    @Override\r\n    public void dispose() {\r\n        // Destroy application's resources here.\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/badlogic/drop/Main.java b/core/src/main/java/com/badlogic/drop/Main.java
--- a/core/src/main/java/com/badlogic/drop/Main.java	(revision a6dea9dd602c0369e3d56e13464688287cebe713)
+++ b/core/src/main/java/com/badlogic/drop/Main.java	(date 1729182672453)
@@ -1,6 +1,7 @@
 package com.badlogic.drop;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Input;
 import com.badlogic.gdx.ScreenAdapter;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -8,10 +9,7 @@
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.utils.ScreenUtils;
-import com.badlogic.gdx.utils.Timer;
-import com.badlogic.gdx.utils.viewport.ScreenViewport;
-import org.w3c.dom.Text;
+import com.badlogic.gdx.utils.viewport.FitViewport;
 
 import java.awt.*;
 import java.awt.image.renderable.RenderContext;
@@ -19,8 +17,12 @@
 
 /** {@link com.badlogic.gdx.ApplicationListener} implementation shared by all platforms. */
 public class Main implements ApplicationListener {
+    FitViewport viewport;
+
     ShapeRenderer shape;
 
+    Vector2 clickPos;
+
     Vector2 pos = new Vector2(100, 100);
     int yChange = 300;
     int xChange = 300;
@@ -29,6 +31,8 @@
 
     @Override
     public void create() {
+        viewport = new FitViewport(800, 450);
+
         shape = new ShapeRenderer();
 
         // Prepare your application here.
@@ -36,16 +40,19 @@
 
     @Override
     public void resize(int width, int height) {
-        // Resize your application here. The parameters represent the new window size.
+        viewport.update(width, height, true);
     }
 
     @Override
     public void render() {
+        handleInput();
+
         Gdx.gl.glClearColor(0,0,0,1);
         Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
         shape.begin(ShapeRenderer.ShapeType.Filled);
         shape.rect(pos.x, pos.y, 50, 50);
+        Gdx.app.log("debug", pos.x + " " + pos.y);
         shape.setColor(Color.BLUE);
         shape.end();
 
@@ -67,7 +74,6 @@
         font.draw(spriteBatch, String.valueOf(Gdx.graphics.getFramesPerSecond()), 10, 10);
         spriteBatch.end();
 
-        Gdx.app.log("debug", String.valueOf(pos.x) + "  " + String.valueOf(pos.y));
     }//
 
     @Override
@@ -84,4 +90,13 @@
     public void dispose() {
         // Destroy application's resources here.
     }
+
+    private void handleInput(){
+        if (Gdx.input.isTouched()) {
+            clickPos = new Vector2(Gdx.input.getX(), Gdx.input.getY());
+            viewport.unproject(clickPos);
+
+            pos = clickPos;
+        }
+    }
 }
Index: lwjgl3/src/main/java/com/badlogic/drop/lwjgl3/Lwjgl3Launcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.badlogic.drop.lwjgl3;\r\n\r\nimport com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application;\r\nimport com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;\r\nimport com.badlogic.drop.Main;\r\n\r\nimport com.badlogic.gdx.math.Vector2;\r\n\r\n/** Launches the desktop (LWJGL3) application. */\r\npublic class Lwjgl3Launcher {\r\n    public static void main(String[] args) {\r\n        if (StartupHelper.startNewJvmIfRequired()) return; // This handles macOS support and helps on Windows.\r\n        createApplication();\r\n//hello\r\n        Vector2 vec = new Vector2(0,0);\r\n    }\r\n\r\n    private static Lwjgl3Application createApplication() {\r\n        return new Lwjgl3Application(new Main(), getDefaultConfiguration());\r\n    }\r\n\r\n    private static Lwjgl3ApplicationConfiguration getDefaultConfiguration() {\r\n        Lwjgl3ApplicationConfiguration configuration = new Lwjgl3ApplicationConfiguration();\r\n        configuration.setTitle(\"UniSimulator\");\r\n        //// Vsync limits the frames per second to what your hardware can display, and helps eliminate\r\n        //// screen tearing. This setting doesn't always work on Linux, so the line after is a safeguard.\r\n        configuration.useVsync(true);\r\n        //// Limits FPS to the refresh rate of the currently active monitor, plus 1 to try to match fractional\r\n        //// refresh rates. The Vsync setting above should limit the actual FPS to match the monitor.\r\n        configuration.setForegroundFPS(Lwjgl3ApplicationConfiguration.getDisplayMode().refreshRate + 1);\r\n        //// If you remove the above line and set Vsync to false, you can get unlimited FPS, which can be\r\n        //// useful for testing performance, but can also be very stressful to some hardware.\r\n        //// You may also need to configure GPU drivers to fully disable Vsync; this can cause screen tearing.\r\n        //configuration.setWindowedMode(1000, 1000);\r\n        //// You can change these files; they are in lwjgl3/src/main/resources/ .\r\n        configuration.setWindowIcon(\"libgdx128.png\", \"libgdx64.png\", \"libgdx32.png\", \"libgdx16.png\");\r\n        configuration.setFullscreenMode(Lwjgl3ApplicationConfiguration.getDisplayMode());\r\n        return configuration;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lwjgl3/src/main/java/com/badlogic/drop/lwjgl3/Lwjgl3Launcher.java b/lwjgl3/src/main/java/com/badlogic/drop/lwjgl3/Lwjgl3Launcher.java
--- a/lwjgl3/src/main/java/com/badlogic/drop/lwjgl3/Lwjgl3Launcher.java	(revision a6dea9dd602c0369e3d56e13464688287cebe713)
+++ b/lwjgl3/src/main/java/com/badlogic/drop/lwjgl3/Lwjgl3Launcher.java	(date 1729182099526)
@@ -1,9 +1,12 @@
 package com.badlogic.drop.lwjgl3;
 
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application;
 import com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;
 import com.badlogic.drop.Main;
 
+import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics;
 import com.badlogic.gdx.math.Vector2;
 
 /** Launches the desktop (LWJGL3) application. */
@@ -11,7 +14,6 @@
     public static void main(String[] args) {
         if (StartupHelper.startNewJvmIfRequired()) return; // This handles macOS support and helps on Windows.
         createApplication();
-//hello
         Vector2 vec = new Vector2(0,0);
     }
 
@@ -31,10 +33,13 @@
         //// If you remove the above line and set Vsync to false, you can get unlimited FPS, which can be
         //// useful for testing performance, but can also be very stressful to some hardware.
         //// You may also need to configure GPU drivers to fully disable Vsync; this can cause screen tearing.
-        //configuration.setWindowedMode(1000, 1000);
+        configuration.setWindowedMode(1000, 1000);
         //// You can change these files; they are in lwjgl3/src/main/resources/ .
         configuration.setWindowIcon("libgdx128.png", "libgdx64.png", "libgdx32.png", "libgdx16.png");
-        configuration.setFullscreenMode(Lwjgl3ApplicationConfiguration.getDisplayMode());
+        //configuration.setFullscreenMode(Lwjgl3ApplicationConfiguration.getDisplayMode());
+        Graphics.DisplayMode displayMode = Lwjgl3ApplicationConfiguration.getDisplayMode();
+        configuration.setWindowedMode(displayMode.width / 2, displayMode.height / 2);
+
         return configuration;
     }
 }
Index: assets/assets.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>VU-Banana-1000x1000.png\r\n.gitkeep\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/assets.txt b/assets/assets.txt
--- a/assets/assets.txt	(revision a6dea9dd602c0369e3d56e13464688287cebe713)
+++ b/assets/assets.txt	(date 1729182674297)
@@ -1,2 +1,1 @@
-VU-Banana-1000x1000.png
 .gitkeep
